<context>
# SureCRM 모바일 반응형 디자인 개선 프로젝트
## Product Requirements Document (PRD)

# 📊 PROJECT CONTEXT & BACKGROUND

## 1. 비즈니스 컨텍스트 및 시장 환경

### 1.1 시장 동향 분석
**보험설계사 업무 환경의 디지털 전환**
- **모바일 중심 업무 패턴**: 보험설계사의 83% 이상이 고객 미팅, 현장 상담 중 모바일 기기 활용
- **멀티디바이스 접근성 요구**: 데스크톱(사무실) → 태블릿(상담실) → 모바일(현장) 간 끊김없는 업무 연속성 필수
- **고객 상호작용 실시간 대응**: 고객 문의, 계약 진행, 소개 관계 관리에서 즉시성이 계약 성공률에 직접적 영향 (평균 24시간 내 대응 시 계약률 34% 향상)

**SaaS 플랫폼 UX 기준 상승**
- **네이티브 앱 수준 웹 경험 기대**: PWA (Progressive Web App) 표준 준수 요구
- **제스처 기반 인터랙션**: 터치, 스와이프, 핀치줌 등 모바일 네이티브 조작 패턴 필수
- **오프라인 기능성**: 네트워크 불안정 환경에서도 핵심 기능 접근 가능해야 함

### 1.2 경쟁사 벤치마킹
**기존 CRM 솔루션 모바일 대응 수준**
- **Salesforce Mobile**: 네이티브 앱 수준의 터치 최적화, 음성 입력, 오프라인 동기화 제공
- **HubSpot Mobile**: 단순화된 모바일 워크플로우, 원터치 액션, 컨텍스트 인식 알림 시스템
- **Pipedrive Mobile**: 시각적 파이프라인 드래그앤드롭, 모바일 최적화된 리스트뷰/카드뷰 전환

**차별화 기회**
- **소개 네트워크 시각화**: 기존 CRM에서 제공하지 않는 독특한 그래프 인터랙션의 모바일 최적화
- **보험 업계 특화**: 설계사 워크플로우에 특화된 모바일 UX (미팅 준비, 상품 비교, 계약 프로세스)

### 1.3 사용자 행동 패턴 분석
**현재 SureCRM 사용자 디바이스 분포** (GA4 데이터 기준)
```
데스크톱: 61.2% (주로 사무실/집에서 업무 계획 수립)
모바일: 32.4% (고객 미팅 중, 이동 중 정보 확인)
태블릿: 6.4% (상담실/고객 앞에서 프레젠테이션)
```

**모바일 사용 시점별 니즈**
- **미팅 직전 (5분 내)**: 고객 정보 빠른 확인, 소개 관계 메모 검토
- **미팅 중**: 고객 정보 실시간 업데이트, 다음 미팅 즉석 예약
- **이동 중**: 오늘 일정 확인, 긴급 고객 연락처 조회, 간단한 메모 추가
- **고객 앞**: 소개 네트워크 시각적 설명, 파이프라인 현황 공유

## 2. 현재 시스템 상태 및 문제점 분석

### 2.1 기술 아키텍처 현황
**현재 기술 스택**
```typescript
// Frontend Stack
- React 18.3.1 + TypeScript 5.4.2
- React Router v7 (from Remix)
- Tailwind CSS v3.4.8 (v4 호환성 준비 필요)
- ShadCN/UI 컴포넌트 라이브러리
- Supabase Auth & Database

// 현재 반응형 구현 상태
- 기본 Tailwind breakpoints (sm:640px, md:768px, lg:1024px, xl:1280px)
- Grid/Flexbox 기본 레이아웃
- 일부 컴포넌트만 모바일 최적화 완료
```

**Container Queries 미적용 현황**
```css
/* 현재: 기본 Media Queries 사용 */
@media (max-width: 768px) {
  .dashboard-grid { grid-template-columns: 1fr; }
}

/* 필요: Container Queries 기반 컴포넌트별 반응형 */
@container (width < 500px) {
  .pipeline-card { flex-direction: column; }
}
```

### 2.2 사용성 문제점 상세 분석

**2.2.1 네비게이션 시스템 문제**
- **사이드바 접근성**: 모바일에서 햄버거 메뉴 클릭 후 깊이 2단계 이상 진입 시 뒤로가기 혼란
- **브레드크럼 부재**: 복잡한 페이지 구조에서 현재 위치 인식 어려움
- **탭 네비게이션 부족**: 모바일에서 빠른 기능 전환을 위한 바텀 네비게이션 없음

**2.2.2 컴포넌트별 모바일 최적화 부족**

**소개 네트워크 그래프 (Network Visualization)**
```typescript
// 현재 문제점
- Canvas 기반 그래프에서 터치 제스처 미지원
- 노드 간격이 데스크톱 기준으로 설정되어 모바일에서 터치 타겟 부족
- 줌/팬 기능의 모바일 최적화 부재
- 노드 선택 시 정보 패널이 화면을 과도하게 점유

// 개선 필요사항
- 터치 친화적 노드 크기 (최소 44px 터치 타겟)
- 멀티터치 제스처 지원 (핀치 줌, 투 핑거 팬)
- 모바일 최적화된 정보 패널 (바텀 시트)
```

**영업 파이프라인 (Kanban Board)**
```typescript
// 현재 문제점
- 드래그앤드롭이 모바일 터치에서 부자연스러움
- 카드 크기가 모바일 스크린에 비해 비효율적
- 스크롤 방향 혼재 (수평/수직)로 인한 조작 어려움

// 개선 필요사항
- 터치 드래그 최적화 (Long Press → Drag)
- 모바일 전용 카드 레이아웃 (스택형)
- 스와이프 제스처로 단계 이동
```

**대시보드 KPI 위젯**
```typescript
// 현재 문제점
- 차트 라이브러리가 모바일 터치 이벤트 미지원
- 그리드 레이아웃이 모바일에서 정보 밀도 과다
- 위젯 재배치 기능 부재

// 개선 필요사항
- 터치 친화적 차트 인터랙션
- 모바일 우선 정보 계층 구조
- 사용자 맞춤 위젯 배치
```

### 2.3 성능 이슈 분석

**Core Web Vitals 현재 지표**
```typescript
// Desktop Performance
- LCP: 1.8s (Good)
- FID: 45ms (Good)  
- CLS: 0.05 (Good)

// Mobile Performance (문제점)
- LCP: 4.2s (Poor) - 이미지 최적화 부족
- FID: 185ms (Poor) - JavaScript 번들 크기 과다
- CLS: 0.18 (Poor) - 동적 콘텐츠 로딩 시 레이아웃 시프트
```

**번들 크기 분석**
```typescript
// 현재 JavaScript 번들
- Main Bundle: 487KB (gzipped)
- React + Dependencies: 42KB
- Chart Libraries: 156KB ⚠️ (차트 라이브러리 과다 포함)
- D3.js (네트워크 그래프): 89KB ⚠️
- UI Components: 78KB
- Business Logic: 122KB

// 개선 목표
- Main Bundle: < 300KB (gzipped)
- Code Splitting 적용
- Tree Shaking 최적화
- 동적 Import 확대
```

### 2.4 접근성 (Accessibility) 현황

**WCAG 2.1 준수 현황**
```typescript
// 현재 문제점
- 키보드 네비게이션 불완전 (그래프 뷰, 드래그앤드롭)
- 색상 대비비 미달 일부 영역 (4.5:1 기준)
- 스크린 리더 지원 부족 (ARIA 레이블 누락)
- 터치 타겟 크기 미달 (44px 미만 요소 다수)

// 개선 목표
- WCAG 2.1 AA 등급 달성
- 키보드 전용 조작 100% 지원
- 고대비 테마 제공
- 음성 안내 지원
```

## 3. 비즈니스 임팩트 및 ROI 분석

### 3.1 사용자 경험 개선의 비즈니스 가치

**현재 모바일 사용성 문제로 인한 손실**
```typescript
// 정량적 지표
- 모바일 세션 당 평균 작업 완료율: 23% (데스크톱 대비 -64%)
- 모바일 사용자 이탈률: 73% (첫 번째 작업 시도 실패 시)
- 고객 정보 업데이트 지연: 평균 4.7시간 (실시간 업데이트 필요)

// 비즈니스 영향
- 계약 기회 손실: 모바일 접근성 부족으로 인한 즉시 대응 실패
- 사용자 만족도 하락: NPS -12점 (모바일 사용성 관련 피드백)
- 서비스 차별화 약화: 경쟁사 대비 모바일 UX 격차
```

**개선 후 예상 비즈니스 효과**
```typescript
// 목표 지표
- 모바일 작업 완료율: 78% (+55%p 개선)
- 모바일 세션 시간: 평균 8.5분 (현재 3.2분)
- 실시간 정보 업데이트율: 89% (현재 34%)

// ROI 계산
- 개발 비용: $85,000 (2명 × 12주)
- 예상 사용자 만족도 개선: NPS +28점
- 사용자 이탈 방지: 월 15% 예상 이탈률 → 7%
- 계약 전환율 개선: 평균 8% 증가 예상
```

### 3.2 기술 부채 해결의 장기적 가치

**현재 기술 부채 현황**
```typescript
// 유지보수성 이슈
- 반응형 CSS 중복 코드: 47% (DRY 원칙 위반)
- 컴포넌트 재사용성: 31% (동일 기능 컴포넌트 중복 개발)
- 테스트 커버리지: 54% (모바일 시나리오 테스트 부족)

// 개선을 통한 개발 효율성 향상
- 새 기능 개발 속도: 평균 23% 향상 예상
- 버그 수정 시간: 평균 31% 단축
- 코드 재사용성: 78% 목표
```

### 3.3 시장 경쟁력 확보

**차별화 포인트**
```typescript
// 보험 업계 특화 모바일 UX
- 소개 네트워크 모바일 시각화 (업계 최초)
- 현장 중심 워크플로우 최적화
- 오프라인 동기화 지원

// 기술적 우위
- Container Queries 기반 컴포넌트 반응형
- PWA 표준 준수 (홈 화면 추가, 푸시 알림)
- 60fps 부드러운 애니메이션
```

## 4. 사용자 연구 및 페르소나 분석

### 4.1 주요 사용자 페르소나

**페르소나 1: 현장 중심 설계사 (김현지, 34세)**
```typescript
// 특성
- 경력: 7년차 보험설계사
- 하루 평균 고객 미팅: 4-6회
- 모바일 의존도: 80% (업무 시간 중)
- 기술 친숙도: 중급

// 현재 Pain Points
- 미팅 중 고객 정보 확인 시 화면이 작아 정보 파악 어려움
- 소개 관계 설명 시 그래프를 보여주고 싶지만 모바일에서 조작 불편
- 이동 중 간단한 업데이트도 데스크톱에서만 가능

// 개선 후 기대 효과
- 미팅 준비 시간 50% 단축
- 고객 앞에서 자신감 있는 설명 가능
- 실시간 정보 업데이트로 놓치는 기회 제로
```

**페르소나 2: 멀티태스킹 설계사 (박수영, 28세)**
```typescript
// 특성
- 경력: 3년차 보험설계사
- 관리 고객 수: 280명
- 디바이스 전환 빈도: 하루 12회 이상
- 기술 친숙도: 고급

// 현재 Pain Points
- 데스크톱 → 모바일 전환 시 작업 연속성 끊어짐
- 터치 기반 인터랙션 불편으로 업무 효율성 저하
- 알림 시스템이 모바일에 최적화되지 않음

// 개선 후 기대 효과
- 디바이스 간 끊김없는 워크플로우
- 터치 최적화로 업무 속도 향상
- 스마트 알림으로 중요 업무 놓치지 않음
```

### 4.2 사용자 여정 맵 (Customer Journey Map)

**현재 모바일 사용자 여정의 문제점**
```typescript
// 미팅 준비 단계 (이동 중)
1. 앱 접속 (15초) ⚠️ 로딩 느림
2. 고객 검색 (45초) ⚠️ 검색 UI 불편
3. 고객 정보 확인 (90초) ⚠️ 텍스트 작음, 스크롤 많음
4. 소개 관계 확인 (불가능) ❌ 그래프 뷰 모바일 미지원

// 미팅 중 단계
1. 고객 정보 설명 (어려움) ⚠️ 화면 공유 불편
2. 실시간 노트 작성 (불가능) ❌ 터치 입력 최적화 부족
3. 다음 미팅 예약 (불가능) ❌ 캘린더 뷰 모바일 미지원

// 미팅 후 단계 (현장)
1. 고객 상태 업데이트 (어려움) ⚠️ 드롭다운 조작 불편
2. 메모 추가 (어려움) ⚠️ 텍스트 입력 환경 열악
3. 다음 액션 설정 (불가능) ❌ 복잡한 UI
```

**개선 후 예상 사용자 여정**
```typescript
// 미팅 준비 단계 (이동 중)
1. 앱 접속 (3초) ✅ PWA 캐싱
2. 고객 검색 (10초) ✅ 스마트 검색, 음성 입력
3. 고객 정보 확인 (15초) ✅ 카드형 레이아웃, 핵심 정보 우선
4. 소개 관계 확인 (20초) ✅ 터치 최적화 그래프

// 미팅 중 단계  
1. 고객 정보 설명 (쉬움) ✅ 프레젠테이션 모드
2. 실시간 노트 작성 (쉬움) ✅ 음성 입력, 빠른 템플릿
3. 다음 미팅 예약 (30초) ✅ 원터치 캘린더 연동

// 미팅 후 단계 (현장)
1. 고객 상태 업데이트 (10초) ✅ 스와이프 기반 상태 변경
2. 메모 추가 (15초) ✅ 음성 변환, 자동 완성
3. 다음 액션 설정 (20초) ✅ 템플릿 기반 빠른 설정
```

## 5. 기술적 요구사항 및 제약사항

### 5.1 브라우저 호환성 요구사항

**지원 대상 브라우저**
```typescript
// 모바일 브라우저 (우선 순위)
- Safari iOS 15.0+ (iPhone 사용자 62%)
- Chrome Android 90.0+ (Android 사용자 35%)
- Samsung Internet 16.0+ (Android 사용자 15%)
- Firefox Mobile 95.0+ (Android 사용자 3%)

// 데스크톱 브라우저 (기존 지원)
- Chrome 90.0+
- Safari 15.0+
- Firefox 95.0+
- Edge 90.0+

// 기술 요구사항
- CSS Container Queries 지원
- Intersection Observer API
- ResizeObserver API
- Touch Events API
- Pointer Events API
```

### 5.2 성능 제약사항

**모바일 디바이스 제약사항**
```typescript
// 타겟 디바이스 스펙
- RAM: 최소 3GB (iPhone 8, Galaxy S9 이상)
- CPU: A11 Bionic 이상, Snapdragon 660 이상
- 네트워크: 3G 이상 (최소 1Mbps)

// 성능 목표
- TTI (Time to Interactive): < 3.5초
- 메인 스레드 블로킹: < 50ms
- JavaScript 힙 사용량: < 50MB
- 초기 렌더링: < 1.5초
```

### 5.3 데이터 사용량 제약

**모바일 데이터 최적화**
```typescript
// 데이터 사용량 목표
- 초기 로드: < 2MB
- 페이지 전환: < 500KB
- 실시간 동기화: < 50KB/분
- 이미지 최적화: WebP, AVIF 지원

// 오프라인 지원
- 핵심 기능 오프라인 캐싱
- 동기화 대기열 관리
- 오프라인 상태 표시
```
</context>

<PRD>
# 🎯 핵심 기능 명세 (FUNCTIONAL REQUIREMENTS)

## 1. Container Queries 기반 반응형 그리드 시스템

### 1.1 차세대 반응형 아키텍처 구현
**Tailwind CSS v4 Container Queries 활용**
```css
/* 기존 Media Queries 한계 극복 */
@container (width >= 24rem) {
  .dashboard-widget { 
    @apply @sm:grid-cols-2 @md:grid-cols-3;
  }
}

/* 컴포넌트별 독립적 반응형 설계 */
@container (width < 28rem) {
  .pipeline-card { 
    @apply @max-md:flex-col @max-md:space-y-3; 
  }
}

/* 동적 컨테이너 크기 기반 레이아웃 */
.network-graph {
  @apply @container;
  width: min(100%, 50cqw); /* Container Query Width 단위 활용 */
}
```

**디바이스별 최적화 브레이크포인트**
```typescript
// 모바일 우선 컨테이너 시스템
const containerBreakpoints = {
  '@3xs': '16rem',    // 256px - 초소형 모바일 (iPhone SE)
  '@2xs': '18rem',    // 288px - 소형 모바일
  '@xs': '20rem',     // 320px - 표준 모바일 최소폭
  '@sm': '24rem',     // 384px - 대형 모바일
  '@md': '28rem',     // 448px - 소형 태블릿
  '@lg': '32rem',     // 512px - 태블릿 세로
  '@xl': '36rem',     // 576px - 태블릿 가로
  '@2xl': '42rem',    // 672px - 소형 데스크톱
  '@3xl': '48rem',    // 768px - 표준 태블릿
} as const;

// 복합 컨테이너 조건 활용
const responsiveClasses = {
  networkNode: 'w-12 h-12 @sm:w-16 @sm:h-16 @lg:w-20 @lg:h-20',
  dashboardCard: '@container grid @sm:grid-cols-2 @lg:grid-cols-3',
  pipelineColumn: '@container flex flex-col @md:max-w-[300px]'
};
```

### 1.2 적응형 레이아웃 패턴
**Intrinsic 웹 디자인 구현**
```css
/* 자기 적응형 그리드 시스템 */
.dashboard-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(min(280px, 100%), 1fr));
  gap: clamp(1rem, 2.5vw, 2rem);
  container-type: inline-size;
}

/* 컨텍스트 인식 컴포넌트 */
.widget-container {
  @container (width < 300px) {
    .widget-title { @apply text-sm; }
    .widget-chart { @apply h-32; }
  }
  
  @container (width >= 500px) {
    .widget-title { @apply text-lg; }
    .widget-chart { @apply h-48; }
  }
}
```

## 2. 터치 친화적 인터랙션 시스템

### 2.1 멀티터치 제스처 엔진
**네이티브 터치 이벤트 최적화**
```typescript
// 터치 이벤트 핸들러 시스템
interface TouchGestureConfig {
  element: HTMLElement;
  onPinch?: (scale: number, center: Point) => void;
  onPan?: (delta: Point, velocity: Point) => void;
  onTap?: (point: Point) => void;
  onLongPress?: (point: Point) => void;
  onSwipe?: (direction: SwipeDirection, velocity: number) => void;
}

class TouchGestureManager {
  private pointers: Map<number, PointerEvent> = new Map();
  private gestureState: GestureState = 'idle';
  
  // 핀치 줌 감지 (소개 네트워크 그래프용)
  private detectPinch(e1: PointerEvent, e2: PointerEvent): PinchGesture {
    const distance = Math.hypot(
      e2.clientX - e1.clientX, 
      e2.clientY - e1.clientY
    );
    const center = {
      x: (e1.clientX + e2.clientX) / 2,
      y: (e1.clientY + e2.clientY) / 2
    };
    return { distance, center, scale: distance / this.initialDistance };
  }
  
  // 스와이프 감지 (파이프라인 카드 이동용)
  private detectSwipe(startEvent: PointerEvent, endEvent: PointerEvent): SwipeGesture {
    const deltaX = endEvent.clientX - startEvent.clientX;
    const deltaY = endEvent.clientY - startEvent.clientY;
    const velocity = Math.hypot(deltaX, deltaY) / this.gestureTime;
    
    if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > 50) {
      return {
        direction: deltaX > 0 ? 'right' : 'left',
        velocity,
        distance: Math.abs(deltaX)
      };
    }
    return null;
  }
}
```

**터치 타겟 최적화 시스템**
```css
/* Apple Human Interface Guidelines 준수 */
.touch-target {
  min-width: 44px;
  min-height: 44px;
  position: relative;
}

/* 시각적 크기와 터치 영역 분리 */
.small-icon-button {
  @apply w-6 h-6; /* 시각적 크기 24px */
  
  &::before {
    content: '';
    position: absolute;
    inset: -10px; /* 터치 영역 44px로 확장 */
    z-index: -1;
  }
}

/* 터치 시 즉각적 피드백 */
.touch-feedback {
  @apply transition-all duration-150 ease-out;
  @apply active:scale-95 active:bg-opacity-80;
  @apply focus-visible:ring-2 focus-visible:ring-blue-500;
  
  /* 햅틱 피드백 트리거 */
  &:active {
    animation: haptic-light 150ms ease-out;
  }
}

@keyframes haptic-light {
  0% { transform: scale(1); }
  50% { transform: scale(0.97); }
  100% { transform: scale(1); }
}
```

### 2.2 제스처별 기능 매핑
**소개 네트워크 그래프 제스처**
```typescript
// 네트워크 그래프 터치 인터랙션
const NetworkGraphGestures = {
  // 핀치 줌: 그래프 확대/축소
  onPinch: (scale: number, center: Point) => {
    networkGraph.zoom(scale, center);
    showZoomIndicator(scale);
  },
  
  // 투 핑거 팬: 그래프 이동
  onPan: (delta: Point) => {
    networkGraph.pan(delta.x, delta.y);
    updateViewportIndicator();
  },
  
  // 단일 탭: 노드 선택
  onTap: (point: Point) => {
    const node = networkGraph.getNodeAt(point);
    if (node) {
      showNodeDetails(node, 'bottom-sheet');
      highlightConnectedNodes(node);
    }
  },
  
  // 길게 누름: 컨텍스트 메뉴
  onLongPress: (point: Point) => {
    const node = networkGraph.getNodeAt(point);
    showContextMenu(node, point, {
      actions: ['편집', '삭제', '소개 관계 추가', '고객 정보 보기']
    });
  }
};
```

**영업 파이프라인 제스처**
```typescript
// 파이프라인 카드 터치 인터랙션
const PipelineGestures = {
  // 스와이프: 단계 간 이동
  onSwipeLeft: (card: PipelineCard) => {
    const nextStage = getNextStage(card.currentStage);
    animateMoveToStage(card, nextStage);
    showStageChangeConfirmation(card, nextStage);
  },
  
  onSwipeRight: (card: PipelineCard) => {
    const prevStage = getPreviousStage(card.currentStage);
    animateMoveToStage(card, prevStage);
  },
  
  // 길게 누름: 상세 편집
  onLongPress: (card: PipelineCard) => {
    showCardEditModal(card, {
      mode: 'mobile-optimized',
      quickActions: ['단계 변경', '메모 추가', '미팅 예약']
    });
  }
};
```

## 3. 적응형 네비게이션 시스템

### 3.1 하이브리드 네비게이션 아키텍처
**상황별 네비게이션 패턴**
```typescript
// 디바이스별 네비게이션 전략
const NavigationStrategy = {
  mobile: {
    primary: 'bottom-tabs',     // 주요 5개 기능
    secondary: 'hamburger',     // 부가 기능
    tertiary: 'floating-action' // 빠른 액션
  },
  tablet: {
    primary: 'side-rail',       // 항상 표시
    secondary: 'top-bar',       // 컨텍스트별
    tertiary: 'floating-action'
  },
  desktop: {
    primary: 'sidebar',         // 전체 네비게이션
    secondary: 'breadcrumb',    // 위치 인식
    tertiary: 'keyboard-shortcuts'
  }
};

// 반응형 네비게이션 컴포넌트
const ResponsiveNavigation: React.FC = () => {
  const { breakpoint } = useContainerQuery();
  
  return (
    <>
      {/* 모바일: 하단 탭 네비게이션 */}
      <BottomTabNavigation 
        className="@container fixed bottom-0 inset-x-0 @md:hidden"
        items={[
          { icon: Home, label: '홈', href: '/dashboard' },
          { icon: Network, label: '네트워크', href: '/network' },
          { icon: Pipeline, label: '파이프라인', href: '/pipeline' },
          { icon: Calendar, label: '일정', href: '/calendar' },
          { icon: More, label: '더보기', action: 'menu' }
        ]}
      />
      
      {/* 태블릿 이상: 사이드바 네비게이션 */}
      <SidebarNavigation 
        className="@container hidden @md:flex @md:w-64 @lg:w-72"
        collapsible
        defaultCollapsed={breakpoint === 'md'}
      />
      
      {/* 플로팅 액션 버튼 */}
      <FloatingActionButton
        className="@container fixed bottom-20 right-4 @md:bottom-6"
        actions={[
          { icon: Plus, label: '고객 추가', href: '/clients/new' },
          { icon: UserPlus, label: '소개 관계', action: 'add-referral' },
          { icon: CalendarPlus, label: '미팅 예약', action: 'schedule-meeting' }
        ]}
      />
    </>
  );
};
```

### 3.2 원핸드 조작 최적화
**엄지손가락 접근성 영역**
```css
/* 모바일 인체공학적 설계 */
.thumb-zone {
  /* 안전 영역: 화면 하단 75% */
  --safe-zone-start: 25vh;
  --safe-zone-end: 100vh;
  
  /* 최적 영역: 화면 하단 50% */
  --optimal-zone-start: 50vh;
  --optimal-zone-end: 100vh;
  
  /* 위험 영역: 화면 상단 25% */
  --danger-zone-start: 0vh;
  --danger-zone-end: 25vh;
}

/* 주요 액션 버튼 배치 */
.primary-actions {
  position: fixed;
  bottom: calc(env(safe-area-inset-bottom) + 1rem);
  right: 1rem;
  z-index: 50;
}

/* 보조 액션은 접근 가능한 위치로 이동 */
.secondary-actions {
  position: sticky;
  top: calc(50vh - 2rem); /* 화면 중앙 근처 */
  left: 0;
  z-index: 40;
}
```

**스마트 네비게이션 예측**
```typescript
// 사용자 행동 기반 네비게이션 최적화
interface NavigationPredictor {
  // 시간대별 주요 기능 예측
  predictPrimaryAction(currentTime: Date): NavigationItem {
    const hour = currentTime.getHours();
    
    if (hour >= 9 && hour <= 11) {
      return { icon: Calendar, action: 'today-meetings' }; // 오전: 오늘 일정
    } else if (hour >= 14 && hour <= 17) {
      return { icon: Pipeline, action: 'pipeline' }; // 오후: 파이프라인
    } else {
      return { icon: Network, action: 'network' }; // 저녁: 네트워크 정리
    }
  }
  
  // 위치 기반 기능 제안
  predictLocationAction(location: 'office' | 'field' | 'home'): NavigationItem {
    switch(location) {
      case 'field':
        return { icon: Phone, action: 'quick-call' }; // 현장: 빠른 연락
      case 'office':
        return { icon: BarChart, action: 'reports' }; // 사무실: 보고서
      default:
        return { icon: Home, action: 'dashboard' }; // 집: 대시보드
    }
  }
}
```

## 4. 고도화된 컴포넌트 라이브러리

### 4.1 ShadCN UI 모바일 확장
**터치 최적화 컴포넌트 시스템**
```typescript
// 모바일 특화 컴포넌트 확장
const MobileOptimizedComponents = {
  // 바텀 시트 (모달 대체)
  BottomSheet: {
    defaultProps: {
      snapPoints: ['25%', '50%', '90%'],
      enablePanDownToClose: true,
      enableBackdropDismiss: true
    },
    animations: {
      enter: 'slide-up-spring',
      exit: 'slide-down-ease'
    }
  },
  
  // 터치 친화적 선택기
  TouchSelector: {
    itemHeight: '48px', // 터치 타겟 최소 크기
    hapticFeedback: true,
    scrollMomentum: true
  },
  
  // 스와이프 액션 리스트
  SwipeActionList: {
    leftActions: ['편집', '완료'],
    rightActions: ['삭제', '보관'],
    threshold: 0.3, // 30% 스와이프 시 액션 트리거
    elasticity: 0.8
  }
};

// 다크모드 지원 확장
const ThemeSystem = {
  // 시스템 설정 감지
  detectSystemTheme(): 'light' | 'dark' {
    return window.matchMedia('(prefers-color-scheme: dark)').matches 
      ? 'dark' : 'light';
  },
  
  // 시간대별 자동 테마 전환
  scheduleThemeChange(): void {
    const now = new Date();
    const hour = now.getHours();
    
    // 일몰/일출 시간 기반 자동 전환
    if (hour >= 19 || hour <= 6) {
      this.setTheme('dark');
    } else {
      this.setTheme('light');
    }
  },
  
  // 접근성 고대비 모드
  enableHighContrast(): void {
    document.documentElement.classList.add('theme-high-contrast');
  }
};
```

### 4.2 접근성 우선 설계
**WCAG 2.1 AA 등급 달성**
```typescript
// 접근성 컴포넌트 시스템
const A11yComponents = {
  // 스크린 리더 최적화
  ScreenReaderOptimized: {
    announcePageChange(newRoute: string): void {
      const announcement = `페이지가 ${this.getPageTitle(newRoute)}로 변경되었습니다`;
      this.liveRegion.textContent = announcement;
    },
    
    announceActionResult(action: string, result: 'success' | 'error'): void {
      const message = result === 'success' 
        ? `${action} 완료되었습니다` 
        : `${action} 실패했습니다. 다시 시도해주세요`;
      this.liveRegion.textContent = message;
    }
  },
  
  // 키보드 네비게이션 지원
  KeyboardNavigation: {
    enableFocusManagement(): void {
      // 모달 오픈 시 포커스 트랩
      document.addEventListener('keydown', this.handleKeyDown);
    },
    
    handleKeyDown(e: KeyboardEvent): void {
      switch(e.key) {
        case 'Escape':
          this.closeCurrentModal();
          break;
        case 'Tab':
          this.manageFocusFlow(e);
          break;
        case '/':
          if (e.ctrlKey || e.metaKey) {
            this.openGlobalSearch();
          }
          break;
      }
    }
  },
  
  // 색상 대비 확인
  ColorContrastChecker: {
    validateContrast(foreground: string, background: string): boolean {
      const ratio = this.calculateContrastRatio(foreground, background);
      return ratio >= 4.5; // WCAG AA 기준
    },
    
    suggestAlternativeColors(originalColor: string): string[] {
      // 대비율 기준을 만족하는 대체 색상 제안
      return this.generateContrastCompliantColors(originalColor);
    }
  }
};
```

# 🎭 사용자 경험 설계 (USER EXPERIENCE DESIGN)

## 1. 세분화된 사용자 페르소나 및 여정 분석

### 1.1 주요 페르소나 심화 분석
**페르소나 A: 현장 중심형 설계사 (김현지, 34세)**
```typescript
interface PrimaryPersona {
  // 기본 정보
  profile: {
    experience: '7년차 보험설계사',
    clientBase: 450명,
    monthlyMeetings: 18-24회,
    techProficiency: 'intermediate'
  },
  
  // 업무 패턴
  workflowPattern: {
    peakHours: '10:00-12:00, 14:00-17:00',
    mobileUsage: '78%', // 전체 업무 시간 중
    deviceSwitching: '평균 8회/일',
    multitasking: 'high' // 미팅 중 실시간 기록
  },
  
  // 현재 Pain Points (구체적 시나리오)
  painPoints: [
    {
      scenario: '지하철 이동 중 다음 고객 정보 확인',
      currentTime: '평균 3분 45초',
      frustrationLevel: 'high',
      failureRate: '42%' // 정보 확인 실패율
    },
    {
      scenario: '고객 앞에서 소개 관계 설명',
      currentDifficulty: '화면 작음, 조작 복잡',
      impactOnSales: '설명 포기 35%',
      alternativeBehavior: '수기 그림으로 대체'
    },
    {
      scenario: '미팅 후 즉시 상태 업데이트',
      currentDelay: '평균 4.7시간',
      lostOpportunities: '12% (후속 액션 놓침)',
      workaround: '메모앱 사용 후 나중에 입력'
    }
  ],
  
  // 성공 지표
  successMetrics: {
    infoAccessTime: '< 30초 목표',
    presentationSuccess: '90% 목표',
    realTimeUpdate: '95% 목표'
  }
}
```

**페르소나 B: 데이터 분석형 설계사 (박수영, 28세)**
```typescript
interface SecondaryPersona {
  profile: {
    experience: '3년차 보험설계사',
    clientBase: 280명,
    dataOriented: true,
    techProficiency: 'advanced'
  },
  
  behaviorPattern: {
    analyticsUsage: 'daily',
    reportGeneration: 'weekly',
    networkAnalysis: 'bi-weekly',
    devicePreference: 'mobile-first'
  },
  
  specificNeeds: [
    'Real-time analytics dashboard',
    'Advanced filtering and search',
    'Export capabilities for reports',
    'Cross-device synchronization'
  ]
}
```

### 1.2 사용자 여정 맵 (상세 시나리오별)

**Critical User Journey 1: 이동 중 고객 정보 접근**
```typescript
interface MobileInfoAccessJourney {
  // 현재 상태 (As-Is)
  currentJourney: {
    steps: [
      {
        step: 1,
        action: '앱 실행',
        duration: '8-15초',
        friction: 'PWA 미설치, 느린 로딩',
        userEmotion: 'impatient'
      },
      {
        step: 2,
        action: '고객 검색',
        duration: '25-45초',
        friction: '작은 검색창, 키보드 UI 불편',
        userEmotion: 'frustrated'
      },
      {
        step: 3,
        action: '정보 스크롤',
        duration: '60-120초',
        friction: '텍스트 작음, 레이아웃 비효율',
        userEmotion: 'stressed'
      }
    ],
    totalTime: '93-180초',
    successRate: '58%',
    satisfactionScore: 2.3
  },
  
  // 목표 상태 (To-Be)
  targetJourney: {
    steps: [
      {
        step: 1,
        action: 'PWA 즉시 실행',
        duration: '1-2초',
        enhancement: 'Service Worker 캐싱',
        userEmotion: 'confident'
      },
      {
        step: 2,
        action: '스마트 검색',
        duration: '5-10초',
        enhancement: '음성 입력, 자동완성, 최근 검색',
        userEmotion: 'efficient'
      },
      {
        step: 3,
        action: '카드형 정보 확인',
        duration: '15-20초',
        enhancement: '핵심 정보 우선, 터치 친화적',
        userEmotion: 'satisfied'
      }
    ],
    totalTime: '21-32초',
    successRate: '92%',
    satisfactionScore: 4.6
  }
}
```

**Critical User Journey 2: 고객 앞 프레젠테이션**
```typescript
interface PresentationJourney {
  currentState: {
    preparation: '미팅 전 별도 자료 준비 필요',
    presentation: '화면 공유 어려움, 조작 실수',
    interaction: '고객 질문 시 즉석 대응 불가',
    followUp: '수기 메모 → 나중에 시스템 입력'
  },
  
  enhancedState: {
    preparation: 'PWA 프레젠테이션 모드 원터치 준비',
    presentation: '터치 최적화 그래프, 제스처 네비게이션',
    interaction: '실시간 필터링, 즉석 계산기',
    followUp: '음성 입력, 자동 CRM 동기화'
  },
  
  businessImpact: {
    closingRate: '+23% 예상',
    meetingDuration: '-15분 (효율성 향상)',
    customerSatisfaction: '+31% 예상',
    followUpSpeed: '+67% 빨라짐'
  }
}
```

## 2. 모바일 우선 디자인 철학

### 2.1 Progressive Disclosure 정보 아키텍처
**계층적 정보 구조**
```typescript
// 정보 우선순위 매트릭스
interface InformationHierarchy {
  primary: {
    level: 1,
    content: ['고객명', '연락처', '다음 미팅'],
    displayRule: '항상 표시',
    fontSize: 'text-lg font-semibold',
    placement: 'screen-top-25%'
  },
  
  secondary: {
    level: 2,
    content: ['소개자', '현재 단계', '최근 활동'],
    displayRule: '스크롤 없이 접근',
    fontSize: 'text-base',
    placement: 'screen-middle-50%'
  },
  
  tertiary: {
    level: 3,
    content: ['상세 히스토리', '문서', '가족 정보'],
    displayRule: '스와이프/탭으로 접근',
    fontSize: 'text-sm',
    placement: 'expandable-sections'
  },
  
  contextual: {
    level: 4,
    content: ['메타데이터', '시스템 정보'],
    displayRule: '필요 시에만 표시',
    fontSize: 'text-xs',
    placement: 'modal-or-tooltip'
  }
}

// 적응형 레이아웃 규칙
const AdaptiveLayoutRules = {
  mobile: {
    informationDensity: 'low',
    itemsPerScreen: 3-5,
    scrollDirection: 'vertical',
    actionPlacement: 'bottom-accessible'
  },
  
  tablet: {
    informationDensity: 'medium',
    itemsPerScreen: 6-9,
    scrollDirection: 'both',
    actionPlacement: 'contextual'
  },
  
  desktop: {
    informationDensity: 'high',
    itemsPerScreen: '12+',
    scrollDirection: 'minimal',
    actionPlacement: 'toolbar-based'
  }
};
```

### 2.2 컨텍스트 인식 인터페이스
**상황별 UI 적응**
```typescript
interface ContextAwareUI {
  // 시간 기반 컨텍스트
  timeContext: {
    morning: {
      primaryAction: 'today-schedule',
      suggestedWidget: 'upcoming-meetings',
      theme: 'light-energetic'
    },
    afternoon: {
      primaryAction: 'pipeline-update',
      suggestedWidget: 'active-opportunities',
      theme: 'light-focused'
    },
    evening: {
      primaryAction: 'day-summary',
      suggestedWidget: 'completed-tasks',
      theme: 'dark-relaxed'
    }
  },
  
  // 위치 기반 컨텍스트
  locationContext: {
    office: {
      layout: 'desktop-optimized',
      features: ['detailed-analytics', 'bulk-operations'],
      connectivity: 'high-bandwidth'
    },
    client_location: {
      layout: 'presentation-mode',
      features: ['quick-facts', 'visual-network'],
      connectivity: 'mobile-optimized'
    },
    commute: {
      layout: 'voice-first',
      features: ['audio-summaries', 'quick-actions'],
      connectivity: 'low-bandwidth'
    }
  },
  
  // 활동 기반 컨텍스트
  activityContext: {
    pre_meeting: {
      urgency: 'high',
      requiredInfo: ['client-profile', 'referral-chain', 'last-interaction'],
      suggestedActions: ['review-notes', 'check-directions']
    },
    in_meeting: {
      urgency: 'critical',
      requiredInfo: ['client-details', 'product-comparison'],
      suggestedActions: ['real-time-notes', 'schedule-followup']
    },
    post_meeting: {
      urgency: 'medium',
      requiredInfo: ['outcome-recording', 'next-steps'],
      suggestedActions: ['update-pipeline', 'set-reminders']
    }
  }
}
```

## 3. 상호작용 디자인 원칙

### 3.1 즉시성과 예측 가능성
**Zero-Latency Interactions**
```typescript
// 즉시 반응 시스템
interface ZeroLatencySystem {
  // 낙관적 업데이트
  optimisticUpdates: {
    clientSideChanges: 'immediate',
    serverConfirmation: 'background',
    conflictResolution: 'user-prompted',
    rollbackStrategy: 'graceful-degradation'
  },
  
  // 제스처 예측
  gesturePrediction: {
    swipeIntent: 'detect-at-10px',
    pinchIntent: 'detect-at-touch-start',
    longPressIntent: 'feedback-at-150ms',
    scrollIntent: 'momentum-prediction'
  },
  
  // 상태 표시
  stateIndicators: {
    loading: 'skeleton-screens',
    processing: 'progress-indicators',
    success: 'micro-animations',
    error: 'contextual-messaging'
  }
}
```

### 3.2 에러 처리와 복구 전략
**Resilient User Experience**
```typescript
interface ErrorRecoveryStrategy {
  // 네트워크 오류
  networkErrors: {
    detection: 'navigator.onLine + fetch-timeout',
    userFeedback: 'status-bar-indicator',
    dataStrategy: 'local-cache-fallback',
    retryLogic: 'exponential-backoff'
  },
  
  // 사용자 실수
  userErrors: {
    prevention: 'input-validation + confirm-dialogs',
    correction: 'undo-redo-stack',
    guidance: 'contextual-help-tips',
    learning: 'progressive-disclosure'
  },
  
  // 시스템 오류
  systemErrors: {
    gracefulDegradation: 'feature-flags',
    errorBoundaries: 'component-level-isolation',
    logging: 'user-session-replay',
    reporting: 'automatic-bug-reports'
  }
}
```

# 기술 요구사항
## 기술 스택
- **Frontend**: React 18 + TypeScript, Tailwind CSS v4
- **상태 관리**: Zustand (경량화된 상태 관리)
- **UI Components**: ShadCN UI v2.0 (모바일 최적화 확장)
- **차트/그래프**: D3.js v7 (트리 쉐이킹 적용)
- **애니메이션**: Framer Motion v11 (성능 최적화)
- **PWA**: Workbox v7 (서비스 워커 관리)

## 성능 목표
- **Core Web Vitals**: LCP < 2.5초, FID < 100ms, CLS < 0.1
- **번들 크기**: 메인 번들 < 300KB (gzipped)
- **런타임 성능**: 60fps 애니메이션, 16ms 프레임 버짓 준수
- **네트워크**: 3G 환경에서 3초 내 상호작용 가능

## 브라우저 지원
- **모바일**: iOS Safari 15+, Chrome Android 90+, Samsung Internet 16+
- **데스크톱**: Chrome 90+, Safari 15+, Firefox 95+, Edge 90+
- **기능 감지**: Progressive Enhancement 전략 적용

# 디자인 원칙
## 모바일 우선 설계
- **터치 타겟**: 최소 44px, 권장 48px 크기
- **터치 간격**: 인접 요소 간 최소 8px 여백
- **원핸드 접근**: 화면 하단 75% 영역에 주요 액션 배치
- **제스처 지원**: 네이티브 스크롤, 스와이프, 핀치 줌

## 시각적 계층 구조
- **정보 우선순위**: 핵심 정보 최우선 표시
- **점진적 공개**: Progressive Disclosure 패턴 적용
- **색상 시스템**: 색약자 고려 4.5:1 대비율 준수
- **타이포그래피**: 모바일 최소 16px, 가독성 최적화

## 인터랙션 패턴
- **즉시 반응**: 터치 시 즉각적 시각 피드백
- **예측 가능성**: 일관된 제스처 패턴 유지
- **오류 방지**: 실수 방지 디자인, 실행 취소 옵션
- **상태 표시**: 로딩, 성공, 오류 상태 명확한 표현

# 구현 계획
## Phase 1: 기반 구조 (2주)
### Week 1-2: 반응형 시스템 구축
- **Tailwind CSS v4 마이그레이션**: Container Queries 지원
- **컴포넌트 시스템 재구축**: 모바일 우선 컴포넌트 라이브러리
- **PWA 기반 구조**: 서비스 워커, 매니페스트 파일 설정

## Phase 2: 핵심 페이지 최적화 (3주)
### Week 3-4: 주요 인터페이스 개선
- **대시보드 모바일 최적화**: 위젯 재배치, 터치 친화적 차트
- **소개 네트워크 모바일 재설계**: 터치 제스처, 바텀 시트 정보 패널
- **영업 파이프라인 터치 최적화**: 드래그앤드롭 대신 스와이프 액션

### Week 5: 네비게이션 시스템 구현
- **하이브리드 네비게이션**: 상단 햄버거 + 하단 탭 네비게이션
- **브레드크럼 시스템**: 복잡한 페이지 구조 내 위치 인식
- **빠른 액션 플로팅 버튼**: 주요 기능 원터치 접근

## Phase 3: 고급 기능 및 최적화 (3주)
### Week 6-7: 인터랙션 고도화
- **제스처 인터페이스**: 스와이프, 핀치, 길게 누름 구현
- **음성 입력 지원**: 메모 작성, 고객 검색
- **오프라인 동기화**: 핵심 기능 오프라인 지원

### Week 8: 성능 최적화 및 테스트
- **코드 스플리팅**: 라우트별 동적 로딩
- **이미지 최적화**: WebP, 지연 로딩, 반응형 이미지
- **애니메이션 최적화**: GPU 가속, 60fps 보장

## Phase 4: 배포 및 모니터링 (2주)
### Week 9-10: 품질 보증 및 배포
- **접근성 테스트**: WCAG 2.1 AA 등급 준수 확인
- **크로스 브라우저 테스트**: 다양한 모바일 디바이스 검증
- **성능 모니터링**: Real User Monitoring 설정

# 성공 지표
## 정량적 지표
- **페이지 로드 시간**: 3초 → 1.5초 (50% 개선)
- **모바일 작업 완료율**: 23% → 78% (240% 향상)
- **사용자 만족도**: NPS -12점 → +28점 (40점 개선)
- **이탈률**: 73% → 35% (52% 감소)

## 정성적 지표
- **사용자 피드백**: "모바일에서도 편리하게 사용 가능"
- **업무 효율성**: "이동 중에도 실시간 업무 처리 가능"
- **고객 만족도**: "고객 앞에서 자신있게 시연 가능"

# 리스크 및 대응방안
## 기술적 리스크
- **브라우저 호환성**: Progressive Enhancement로 기능 차등 제공
- **성능 저하**: 번들 크기 모니터링, 지연 로딩 적극 활용
- **터치 디바이스 다양성**: 디바이스별 테스트 강화

## 일정 리스크
- **개발 지연**: 주요 기능 우선순위 명확화, MVP 접근
- **리소스 부족**: 외부 전문가 컨설팅 고려
- **품질 이슈**: 지속적 코드 리뷰, 자동화 테스트 확대

# 프로젝트 팀 구성
## 개발 팀
- **Frontend 개발자**: 2명 (React, TypeScript 전문)
- **UI/UX 디자이너**: 1명 (모바일 디자인 전문)
- **QA 엔지니어**: 1명 (모바일 테스트 전문)

## 외부 협력
- **모바일 UX 컨설턴트**: 설계 단계 자문
- **접근성 전문가**: WCAG 준수 검증
- **성능 최적화 전문가**: Core Web Vitals 개선
</PRD>
</rewritten_file> 