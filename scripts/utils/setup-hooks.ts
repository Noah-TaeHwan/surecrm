#!/usr/bin/env tsx

/**
 * üîß Git Hooks ÏÑ§Ï†ï Ïä§ÌÅ¨Î¶ΩÌä∏
 * ÏÉàÎ°úÏö¥ Í∞úÎ∞úÏûêÍ∞Ä ÌîÑÎ°úÏ†ùÌä∏Î•º ÌÅ¥Î°†ÌñàÏùÑ Îïå ÏûêÎèôÏúºÎ°ú Git hooksÎ•º ÏÑ§Ï†ïÌï©ÎãàÎã§.
 */

import { execSync } from 'child_process';
import { writeFileSync, mkdirSync, chmodSync } from 'fs';
import { join } from 'path';

const PROJECT_ROOT = process.cwd();
const GIT_HOOKS_DIR = join(PROJECT_ROOT, '.git', 'hooks');

console.log('üîß Setting up Git hooks for automatic version bumping...');

try {
  // .git/hooks ÎîîÎ†âÌÜ†Î¶¨ ÌôïÏù∏ Î∞è ÏÉùÏÑ±
  mkdirSync(GIT_HOOKS_DIR, { recursive: true });

  // pre-push ÌõÖ Ïä§ÌÅ¨Î¶ΩÌä∏ ÏÉùÏÑ±
  const prePushHook = `#!/bin/sh
# ÏûêÎèô Î≤ÑÏ†Ñ Ï¶ùÍ∞Ä pre-push ÌõÖ

echo "üè∑Ô∏è  Auto bumping version before push..."

# ÌòÑÏû¨ Î∏åÎûúÏπò ÌôïÏù∏
current_branch=$(git rev-parse --abbrev-ref HEAD)

# master/main Î∏åÎûúÏπòÍ∞Ä ÏïÑÎãàÎ©¥ Ïä§ÌÇµ
if [ "$current_branch" != "master" ] && [ "$current_branch" != "main" ]; then
    echo "‚ÑπÔ∏è  Skipping version bump (not on master/main branch)"
    exit 0
fi

# Î≥ÄÍ≤ΩÏÇ¨Ìï≠Ïù¥ ÏûàÎäîÏßÄ ÌôïÏù∏
if [ -n "$(git status --porcelain)" ]; then
    echo "‚ö†Ô∏è  Working directory not clean. Committing changes first..."
    git add .
    git commit -m "üöÄ Auto commit before version bump"
fi

# Ìå®Ïπò Î≤ÑÏ†Ñ Ï¶ùÍ∞Ä
npm version patch --no-git-tag-version

# package.json Î≥ÄÍ≤ΩÏÇ¨Ìï≠ Ïª§Î∞ã
git add package.json
git commit -m "üè∑Ô∏è Auto bump version to $(node -p "require('./package.json').version")"

# ÌÉúÍ∑∏ ÏÉùÏÑ±
new_version="v$(node -p "require('./package.json').version")"
git tag "$new_version"

echo "‚úÖ Version bumped to $new_version"
`;

  const prePushPath = join(GIT_HOOKS_DIR, 'pre-push');
  writeFileSync(prePushPath, prePushHook);
  chmodSync(prePushPath, 0o755);

  console.log('‚úÖ pre-push hook created successfully');

  // Í∞ÑÎã®Ìïú Î≤ÑÏ†Ñ Ï†ïÎ≥¥ ÌôïÏù∏ Ïä§ÌÅ¨Î¶ΩÌä∏ÎèÑ ÏÉùÏÑ±
  const versionInfoScript = `#!/usr/bin/env tsx

import { readFileSync } from 'fs';
import { join } from 'path';

const packageJson = JSON.parse(
  readFileSync(join(process.cwd(), 'package.json'), 'utf-8')
);

console.log(\`üì¶ Current version: v\${packageJson.version}\`);
console.log(\`üöÄ Next push will bump to: v\${packageJson.version.split('.').map((v, i) => i === 2 ? String(Number(v) + 1) : v).join('.')}\`);
`;

  writeFileSync(
    join(PROJECT_ROOT, 'scripts', 'utils', 'version-info.ts'),
    versionInfoScript
  );

  console.log('‚úÖ Git hooks setup completed!');
  console.log('');
  console.log('üìã How to use:');
  console.log('  - Just push normally: git push origin master');
  console.log('  - Version will automatically increment from v0.7.4 ‚Üí v0.7.5');
  console.log('  - Check current version: npm run version:info');
  console.log('');
} catch (error) {
  console.error('‚ùå Error setting up git hooks:', error);
  process.exit(1);
}
